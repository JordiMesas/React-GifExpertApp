{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAgCeA,EA5BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAErB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACC,sBAAMC,SARc,SAACC,GACfA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,GAAGR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtEN,EAAc,KAIpB,SACC,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbd,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,+BCTZG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAE2BC,UAAUH,GAFrC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCeLO,EAZK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAI7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAIA,QCaDO,EAnBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEf,ECHwB,SAACA,GAC5B,MAA0Bd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACTxB,EAAQC,GACGwB,MAAK,SAACC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGzB,CAACpB,IAEGqB,EDd6BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAExB,OACC,qCACC,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEzCoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAErB,qBAAKA,UAAU,YAAf,SACEH,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aESZgB,EArBM,WACpB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACC,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEC2C,EAAWnB,KAAI,SAACT,GAAD,OACf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,YCZlB6B,IAASC,OAEL,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.0a8fff9d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n        \r\n\t};\r\n\tconst handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) setCategories(cats => [inputValue,...cats]);\r\n        setInputValue('');\r\n\r\n    };\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input type='text' value={inputValue} onChange={handleInputChange} />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\n\r\nAddCategory.propTypes = {\r\n    \r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n    const url =\r\n        `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=6gKennuh1QLSSSPPSUB5tHDHetywHd0F`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            // se pone delante de images \"?\" para poner la condiciones de que se use url si trae la api\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n\r\n    \r\n};","import React from 'react';\r\n\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    // console.log({id, title, url});\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\t\r\n    const { data:images, loading } = useFetchGifs( category );\t\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n            {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n            \r\n\t\t\t<div className='card-grid'>\r\n\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setstate] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category)\r\n            .then((imgs) => {\r\n\t\t\t\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false,\r\n                });\r\n\t\t    });\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\tconst [categories, setCategories] = useState(['One Punch']);\r\n\r\n\t// const handleAdd = () =>{\r\n\t//   // setCategories([...categories, 'Vegeta']);\r\n\t//   setCategories(cats => [...cats, 'Vegeta']);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\r\n\t\t\t{categories.map((category) => (\r\n\t\t\t\t<GifGrid key={category} category={category} />\r\n\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}